/*
 * Books API
 *
 * This web service offers information on books
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
    "encoding/json"
    "net/http"
    "path"
)


var books = []Book{
    Book{BookId: "Book1", Title: "Operating System Concepts", Edition: "9th",
        Copyright: "2012", Language: "ENGLISH", Pages: "976",
        Author: "Abraham Silberschatz", Publisher: "John Wiley & Sons"},
    Book{BookId: "Book3", Title: "Computer Networks", Edition: "5th",
        Copyright: "2010", Language: "ENGLISH", Pages: "960",
        Author: "Andrew S. Tanenbaum", Publisher: "Andrew S. Tanenbaum"},
}

var authors = []Author{
    Author{
        AuthorId: "A1",
	    Name: "Abraham Silberschatz",
	    Nationality: "Costa Rica",
	    Birth: "1980-02-02",
	    Genere: "Computadoras"},
    Author{
        AuthorId: "A2",
	    Name: "Andrew S. Tanenbaum",
	    Nationality: "Costa Rica",
	    Birth: "1980-03-02",
	    Genere: "Computadoras"}}



func find(x string) int {
    for i, book := range books {
        if x == book.BookId {
            return i
        }
    }
    return -1
}

func findAuthor(x string) int {
    for i, author := range authors {
        if x == author.AuthorId {
            return i
        }
    }
    return -1
}



func AuthorAuthorIdBooksGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}

func AuthorsAuthorIdDelete(w http.ResponseWriter, r *http.Request) {
    id := path.Base(r.URL.Path)
    i := findAuthor(id)
    if i == -1 {
        return
	}
	authors = append(authors[:i], authors[i+1:]...)
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdGet(w http.ResponseWriter, r *http.Request) {
    id := path.Base(r.URL.Path)
    i := findAuthor(id)
    if i == -1 {
        return
    }
    dataJson, _ := json.Marshal(authors[i])
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdPut(w http.ResponseWriter, r *http.Request) {
    var author Author
    err := json.NewDecoder(r.Body).Decode(&author)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	i := findAuthor(author.AuthorId)
	if i == -1 {
		return
	}
    authors[i] =  author
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
}

func AuthorsPost(w http.ResponseWriter, r *http.Request) {
    var author Author
    err := json.NewDecoder(r.Body).Decode(&author)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
    authors = append(authors, author)
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
}

func BooksBookIdAuthorsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}

func BooksBookIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
    i := find(id)
    if i == -1 {
        return
	}
	books = append(books[:i], books[i+1:]...)
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
}

func BooksBookIdGet(w http.ResponseWriter, r *http.Request) {
    id := path.Base(r.URL.Path)
    i := find(id)
    if i == -1 {
        return
    }
    dataJson, _ := json.Marshal(books[i])
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}

func BooksBookIdPublishersGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}

func BooksBookIdPut(w http.ResponseWriter, r *http.Request) {
    var book Book
    err := json.NewDecoder(r.Body).Decode(&book)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	i := find(book.BookId)
	if i == -1 {
		return
	}
    books[i] =  book
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
}

func BooksPost(w http.ResponseWriter, r *http.Request) {
    var book Book
    err := json.NewDecoder(r.Body).Decode(&book)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }
    books = append(books, book)
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdBooksGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}

func PublishersPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}

func PublishersPublisherIdDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}

func PublishersPublisherIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}

func PublishersPublisherIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	/**@TODO**/
}
